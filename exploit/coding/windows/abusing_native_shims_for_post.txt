Reference:
1. https://www.youtube.com/watch?v=LOsesi3QkXY
2. https://technet.microsoft.com/en-us/library/dd837644(v=ws.10).aspx
3. http://www.alex-ionescu.com/?p=39
4. http://www.alex-ionescu.com/?p=40
5. http://www.alex-ionescu.com/?p=41
6. http://www.alex-ionescu.com/?p=43
7. https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf
8. https://www.youtube.com/watch?v=SVqiDdVS7Wo

DEF CON 23 - Sean Pierce - Abusing Native Shims for Post Exploitation

Older versions of Windows(Windows 95) had a poor memory manager,
	Applications such as SIMS could free up memory but still continue to use it
		This wouldnt be much of a problem because there weren't many concurrent processes
		
	More about Microsoft development methodology:
		http://www.amazon.in/Old-New-Thing-Development-Throughout/dp/0321440307
		
		The Old New Thing: Practical Development Throughout the Evolution of Windows
		
Microsoft attempts to fix third party codes to ensure that their hardware/software remains useful
			Their aim is application compatibility
			Example:
				Hardware: driver codes
				Software: memory management in applications

Fix, Modes and Shim

	Fix:
		The tab in compatibility mode to control:
			Display settings
			User privileges
		It is a single setting that only does one thing
	
	Mode:
		Bunch of fixes bundled together such as choosing the OS in the compatibility mode.
		It has a couple of fixes bundled together in a mode.
		
	Shim:
		The fix and mode configuration are bundled togther in a shim database file(.sdb).
		

How is a process shimmed?
	1. Parent process calls CreateProcess() or Shell execute or something etc.
	   When a new process needs to be created, a program will use one of the functions in ntdll.dll, such as CreateProcess().
			1. Parent process checks if the process should be shimmed
				To determine if the new process needs to be shimmed, apphelp.dll is loaded and two registry keys might be opened or queried:
					a. HKCM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers
					b. HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers
			2. Child process resources and shimming code are inserted and initialized
				If the application needs to be shimmed  an undocumented __COMPAT_LAYER environment variable will be set in the new child process. 
				The kernel creates the various data structures, sets up the process space then loads ntdll.dll into that new process space.
				In that space, the kernel will set the context struct to begin executing the ntdll.dll function called LdrInitializedThunk().
				This function effectively sets up everything the process will need such as:
					1. Initialize the heap
					2. Maps and initializes the appropriate DLL’s
					3. Initializes Tread Local Storage (TLS)
					4. Fiber Local Storage (FLS)
					5. Import Address Tables (IAT’s)
					6. Export Address Tables (EAT’s)
					7. Process the Manifest files (Which might also have compatibility settings)
					8. Read the application compatibility database and loading the shim engine
					
			After all the initialization is done, the kernel will reset the threat’s context to the ntdll.dll function RtlUserThreatStart()
				which will in turn begin executing the actual original entry point for the executable that was specified with CreateProcess().
			If the child process needs to be shimmed,
				both the parent and child processes will load apphelp.dll and verify the sdb file.
			If the sdb file cannot be found or opened
				the Application Event Log will record, ‘Unable to open shim database version registry key’.
			Assuming the sdb file is found and loaded without error,
				it is then parsed to further verify that the file should indeed be shimmed by checking the sdb file for more name filters and other file criteria;
					there is always at least one filter, but by default it is a match-all wildcard character: *.

			The loaded sdb file will be further parsed to find the specific Fix (or Fixes) that will be applied along with a reference to a DLL where that Fix is implemented.
			The specified DLL is then loaded into the suspended process, and allowed to execute DllMain() following the initialization of the other system DLLs.
			
			If the Fix does not reference a DLL then
				the native system shim database(s) are loaded in order find the appropriate DLL where that particular fix is implemented.
				Most of the predefined Fixes are found in %WINDIR%\AppPatch\sysmain.sdb and most of those fixes are implemented in %WINDIR%\AppPatch\AcGeneral.dll. 
			
			If the Fix is not predefined in sysmain.sdb it is called a Custom Fix.
			Anyone can create a custom fix by creating a DLL which exports the following functions:
				1. GetHookAPIs(char *,ushort *,ulong *)
				2. NotifyShims(char *, unsigned __int16 *, unsigned __int32 *)
			The DLL containing the Fix is typically hooks the IAT of the target to intercept specific functions.
			For example the VirtualRegistry Fix will hook all registry related calls and manipulate them accordingly.
			GetProcAddress() is also hooked to anticipate dynamic calls to the would-be hooked functions.
			
			3. Typically the shim hooks the Import Address Table(IAT).
				The Import Address Table is an in-memory data structure that holdes the addresses for the operating system function calls that a program is going to use.
				A rootkit/compatibility framework makes use of this table to hook into whatever it wants to manipulate. 
				After ntdll.dll loads the AppInit DLLs in the child process, it then loads the shim engine which is implemented with apphelp.dll. 
				This shim engine will clear the environment variable __COMPAT_LAYER then apply the Fixes and patches (if any) to the target module. 
				It is possible to have more than one sdb apply Fixes to the same process but this leads to undefined behavior due to the uncertain order in which the shims are applied.
	2. Child process begins executing
			1. Shimming code intercepts and manipulates the API calls
			
			Application --> Import table --> Shim --> Windows
			
Official uses:
	Sdb files have undocumented features such as hot patching which is currently only used by Microsoft to implement the functionality in Fixit patches. 
	EMET
	Third party software

Do the practical.

What can we do with this?
	Targeted persistence
		Catch all credentials for an application
		Redirect application logs
		Snoop/redirect network traffic
		Tojanize any application
		Force vulnerable DLL loading	
		Subvert system integrity
		UAC prompt bypass(Patched with KB3045645(optional patch))
			Before this patch you could modify the UAC manifest to escalate privileges
	API logging
	Kill any application
	Malware obfuscation
		Anti-analysis
		Autoruns(VirtualRegistry to hide malware)
	Shim explorer.exe hot patch

Current prevention:
	Disable via group policy(not recommended)
	Remove shim engine(not recommended)
	Remove sdb installer(not effective)
	No admin access
	
Current tools:
	Microsoft released its tool called Microsoft Application Compatibility Toolkit
	sdbinst.exe
	sdb-explorer.exe
	shims.exe
	Shim Cache Parser
	
	None of these help prevent or detect malicious shims.
	
	Detect:
		Shim-file-scanner
		Shim-process-scanner
	Prevent:
		Shim-Guard
	Respond:
		Sdb ingest module(autopsy)
		sdb scanner(volatility)