Using reflection to activate functionality inside a .NET program
	A legitimate functionality within the .NET framework
	Applies to Java and other languages with CLR functionality
Allows us to look at objects and edit them at run time
	This can be used to make a .NET application malleable
	Look into the contents and modify it to change the logic flow

What will we be doing:
(Not attacking code but the runtime itself)
Accessing running .NET programs
Attack runtime structure
	Attack target process space
	Modify runtime objects(structure itself not the code base)
	What do we achieve?
		Compromise the GUI
		Instantiate new features
		Access code
		Subvert logic
		Evaluate object structure
	Attack type:
		Memory only
		Deployment independent
		Stable (not using the heap or manipulating pointes but using the stable .NET framework itself)
		Language agnostic
	What are we attacking?
		A .NET process
			AppDomains
			Assemblies
				Modules
				Classes
					Functionality
					Objects
						Events
						Values
						Instances
	What does a .NET program look like?
		Process
			.NET framework runtime
				AppDomain
					.NET Assembly
						Classes & Objects
							Values & Functions
	What are the specific tasks behind the attack?
		1. Connect to your object
			Inject code
				Payload is packaged into a safe wrapper which is injected into the application
			Exploit the target app
				In the injected application, load up C++ which unpackages and loads C#
			Infect the target's code
				When you inject into an application you end up in nowhere because you have no references.
				Now you interact with the GUI by asking a handle to the windows and asking .NET to convert it into an object.
			Infect the framework
		2. Find references to Objects of interest
                                Once you have the windows form that you want you can interate inside of that to access all of the controls and all of
the events. Events being the function pointers to your objects. Now you can iterate through this object structure to either reach your target object o
r have exhasuted entire object structure.
		3. Move between objects -Reflection
		4. Change object -Reflection
			Pull buttons from the form
			Pull events from the button
	What can you get from reflection?
		BaseType
		Attributes
		Interfaces
		NestedTypes
		Who is the DeclaringMethod
		Who is the DeclaringType
		Constructors
		Events
		Fields
		Members
		Methods
		Properties
		UnderlyingSystemType
		Namespace
		Name
Attack .NET app on disk
	Access logic
	Decompile
	Infect logic
	Hook logic
	Test
In terms of a company:
	Get to know their products
	Find weaknesses in them maybe the re-use this code elsewhere
	Control what you need
Tools
	1. DotNetaSploit
	2. Visual Studio decompiler



